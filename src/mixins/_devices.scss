////
/// Device related mixins
/// This set of mixins assists in responsively displaying content by generating efficient media
/// queries to adapt to the desired target.
///
/// @group Mixins
/// @since 2.0.0
////

/// Generate a media query for a target device
///
/// By default this mixin will generate a media query to target all sizes less than or equal to
/// the target device.
///
/// Optionally, device keys can be prefixed with a comparison identifier to modify the query:
///  - `lte-{$device}`: Less than or equal to
///  - `lt-{$device}`: Less than
///  - `gte-{$device}`: Greater than or equal to
///  - `gt-{$device}`: Greater than
///
/// @todo  this should implement handling for when a device is not found
/// @see   $adapt-devices
/// @since 1.0.0
/// @param {string} $device a valid device key
@mixin device($device) {
    $query:   parse-device-query($device);
    $compare: map-get($query, 'compare');
    $device:  map-get($query, 'device');

    @if $compare == 'lte' {
        $query: '(max-width: ' + map-get($adapt-devices, $device) + ')';
    } @else if $compare == 'lt' {
        $query: '(max-width: ' + (map-get($adapt-devices, $device) - 1) + ')';
    } @else if $compare == 'gte' {
        $query: '(min-width: ' + map-get($adapt-devices, $device) + ')';
    } @else if $compare == 'gt' {
        $query: '(min-width: ' + (map-get($adapt-devices, $device) + 1) + ')';
    }

    @media only screen and #{$query} {
        @content;
    }
}

/// Generate a media query to target sizes between two devices
///
/// @todo  this should implement handling for when a device is not found
/// @see   $adapt-devices
/// @since 2.0.0
/// @param {number} $min-device - minimum device size
/// @param {number} $max-device - maximum device size
@mixin device-between($min-device, $max-device) {
    $min-width: map-get($adapt-devices, $min-device);
    $max-width: map-get($adapt-devices, $max-device);

    @media only screen and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
        @content;
    }
}

/// Device mixin alias
///
/// @alias device
/// @since 1.0.0
/// @param {string} $device valid device key
@mixin d($device) {
	@include device($device) {
		@content;
	}
}

/// Mobile media query shortcut
///
/// @alias device
/// @since 2.0.1
@mixin mobile {
	@if map-has-key($adapt-devices, mobile) {
		@include device(lte-mobile) {
			@content;
		}
	} @else {
		@error "A device definition with the key 'mobile' must be present in $adapt-devices to use the mobile shortcut mixin.";
	}
}

/// Tablet media query shortcut
///
/// @alias device
/// @since 2.0.1
@mixin tablet {
	@if map-has-key($adapt-devices, tablet) {
		@include device(lte-tablet) {
			@content;
		}
	} @else {
		@error "A device definition with the key 'tablet' must be present in $adapt-devices to use the tablet shortcut mixin.";
	}
}