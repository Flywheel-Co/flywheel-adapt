
// animation declaration for supporting browsers
// delay, duration, animation type
@mixin animation ($delay, $duration, $animation, $repeat : 0, $direction : forwards) {
    -webkit-animation: $animation $duration $delay $repeat $direction;
    -moz-animation: $animation $duration $delay $repeat $direction;
    -o-animation: $animation $duration $delay $repeat $direction;
    animation: $animation $duration $delay $repeat $direction;
}

// @mixin background-gradient($startColor: #3C3C3C, $endColor: #999999, $type : top) {
//     background-color: $startColor;
//     @if $type == top {
// 	    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
//     }
//     @if $type == left {
// 	    background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
//     }
//     background-image: -webkit-linear-gradient($type, $startColor, $endColor);
//     background-image: -moz-linear-gradient($type, $startColor, $endColor);
//     background-image: -ms-linear-gradient($type, $startColor, $endColor);
//     background-image: -o-linear-gradient($type, $startColor, $endColor);
//     background-image: linear-gradient($type, $startColor, $endColor);
//    //  filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
// }

// @mixin bgimg($w, $h, $bgoptions) {
// 	display: block;
// 	width: $w;
// 	height: $h;
// 	background: $bgoptions;
// 	text-indent: -9999px;
// 	overflow: hidden;
// }

// blur an element
@mixin blur($val) {
	-webkit-filter: blur($val);
	-moz-filter: blur($val);
	-o-filter: blur($val);
	-ms-filter: blur($val);
	filter: blur($val);
}

// set border radius  ( @include border-radius(3px) )
@mixin border-radius($value) {
	-webkit-border-radius: $value;
	-moz-border-radius: $value;
	border-radius: $value;
}
@mixin border-bottom-radius($radius){
	border-bottom-right-radius: $radius;
	-moz-border-radius-bottomright: $radius;
	-webkit-border-bottom-right-radius: $radius;

	border-bottom-left-radius: $radius;
	-moz-border-radius-bottomleft: $radius;
	-webkit-border-bottom-left-radius: $radius;
}
@mixin border-top-radius($radius){
	border-top-right-radius: $radius;
	-moz-border-radius-topright: $radius;
	-webkit-border-top-right-radius: $radius;

	border-top-left-radius: $radius;
	-moz-border-radius-topleft: $radius;
	-webkit-border-top-left-radius: $radius;
}

// set box sizing across supporting browsers  ( @include boxSize() )
@mixin boxSize() {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
@mixin bs() { @include boxSize(); }

@mixin box-shadow($top, $left, $blur, $color) {
	-webkit-box-shadow: $top $left $blur $color;
	-moz-box-shadow: $top $left $blur $color;
	box-shadow: $top $left $blur $color;
}

@mixin box-shadow-inset($top, $left, $blur, $color) {
	-webkit-box-shadow: inset $top $left $blur $color;
	-moz-box-shadow: inset $top $left $blur $color;
	box-shadow: inset $top $left $blur $color;
}

@mixin break-word() {
	-ms-word-break: break-all;

	/* Be VERY careful with this, breaks normal words wh_erever */
	// word-break: break-all;

	/* Non standard for webkit */
	word-break: break-word;

	-webkit-hyphens: auto;
	-moz-hyphens: auto;
	hyphens: auto;
}

// Basic floating clear.
@mixin clearfix(){
	zoom: 1;
	&:before, &:after { content: "\0020"; display: block; height: 0; overflow: hidden; }
	&:after { clear: both; }
}
@mixin cf { @include clearfix(); }

// force hardware excel for css animations
@mixin excel() {
	-webkit-transform: translate3d(0,0,0);
	-moz-transform: translate3d(0,0,0);
	-ms-transform: translate3d(0,0,0);
	-o-transform: translate3d(0,0,0);
	transform: translate3d(0,0,0);
}

//  Set the fontface
@mixin font-face($family, $filename) {
	@font-face {
	  font-family: $family;
	  $prefix : $family + "/" + $filename;
	  src:  url($prefix + ".otf") format('opentype');
	}
}

@mixin hamburger($c: #333333, $w: 24px, $h:18px, $barSize : 5) {
	$barH : $h / $barSize;
	// outline: 1px solid red;
	position: relative;
	height: $h;
	padding-left: $w + 5px;
	color: $c;
	font-size: 1.2em;
	text-transform: uppercase;
	cursor: pointer;
	.hamburger-buns {
		position: absolute;
		top: 50%;
		left: 0;
		margin-top: -($barH / 2);
		height: $barH;
		width: $w;
		color: $c;
		background-color: $c;
	}
	span {
		@extend .hamburger-buns;
		&:before {
			@extend .hamburger-buns;
			top: -($barH * 1.5);
			content: '';
		}
		&:after {
			@extend .hamburger-buns;
			top: ($barH * 2.5);
			content: '';
		}
	}
}

// Keyframes mixin for supporting browsers
@mixin keyframes($name) {
	@-webkit-keyframes #{$name} { @content; }
	@-moz-keyframes #{$name} { @content; }
	@-ms-keyframes #{$name} { @content; }
	@keyframes #{$name} { @content; }
}

@mixin perspective($val) {
	-webkit-perspective: $val;
	-moz-perspective: $val;
	-ms-perspective: $val;
	-o-perspective: $val;
	perspective: $val;
}

// Modify the placeholder across supporting browsers.
@mixin placeholder {
    &::-webkit-input-placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
}

// transform rotate by degrees.  ( @include rotate(-40) )
@mixin rotate( $degrees ) {
	-webkit-transform: rotate($degrees + deg);
	-moz-transform: rotate($degrees + deg);
	-ms-transform: rotate($degrees + deg);
	-o-transform: rotate($degrees + deg);
	filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
}

@mixin setBoxRatio($w, $h, $ratio : 2) {
	@include device(mobile) {
		width: $w / $ratio;
		height: $h / $ratio;
		margin-left: ($w / ($ratio * 2)) * -1;
		background-size: 100% 100%;
	}
}

// transform
@mixin transform( $val ) {
	-webkit-transform: $val;
	-moz-transform: $val;
	-ms-transform: $val;
	-o-transform: $val;
	transform: $val;
}

// transform origin
@mixin transform-origin($val) {
	-webkit-transform-origin: $val;
	-moz-transform-origin: $val;
	-ms-transform-origin: $val;
	-o-transform-origin: $val;
	transform-origin: $val;
}

// transitions across supporting browsers
@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

// translate 3d
@mixin translate3d($x, $y, $z) {
	-webkit-transform: translate3d($x,$y,$z);
	-moz-transform: translate3d($x,$y,$z);
	-ms-transform: translate3d($x,$y,$z);
	-o-transform: translate3d($x,$y,$z);
	transform: translate3d($x,$y,$z);
}


/**
*	Device mixin to be used for media queries
*
*	Options are :
*	mobile, mobile-portrait, monbile-landscape, tablet, tablet-portrait, tablet-landscape, desktop
*
*	@include device(mobile) { content }
**/

// Device Mixin Break Points
$mediaMobilePortrait: 320px;
$mediaMobileLandscape: 480px;
$mediaTabletPortrait: 768px;
$mediaTabletLandscape: 1028px;
$mediaDesktop: 1224px;

@mixin device($media) {
	@if $media == mobile
	{ // smartphone mobile devices
		@media only screen and (max-width: $mediaMobileLandscape) { @content; }
	}@else if $media == tablet
	{ // tablet devices
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletLandscape) { @content; }
	}@else if $media == mobile-portrait
	{ // smartphone portrait
		@media only screen and (max-width: $mediaMobilePortrait) { @content; }
	}@else if $media == mobile-landscape
	{ // smartphone landscape
		@media only screen and (min-width: $mediaMobilePortrait+1) and (max-width : $mediaMobileLandscape) { @content; }
	}@else if $media == tablet-portrait
	{ // tablet portrait
		@media only screen and (min-width : $mediaMobileLandscape+1) and (max-width : $mediaTabletPortrait) { @content; }
	}@else if $media == tablet-landscape
	{ // tablet landscapt
		@media only screen and (min-width: $mediaTabletPortrait+1) and (max-width : $mediaTabletLandscape) { @content; }
	}@else if $media == desktop
	{ // desktop
		@media only screen and (min-width: $mediaDesktop+1) { @content; }
	}
}

@mixin mobile-portrait() {
	@include device(mobile-portrait) { @content; }
}
@mixin mobile() {
	@include device(mobile) { @content; }
}
@mixin tablet-portrait() {
	@include device(tablet-portrait) { @content; }
}
@mixin tablet() {
	@include device(tablet) { @content; }
}
@mixin desktop() {
	@include device(desktop) { @content; }
}

/**
*
* a few classes that can be used for hiding and showing based on browser/device size.
*
**/
// mobile
.showOnlyMobile {
	display:none !important;
	@include device(mobile) { display:block !important; }
}
.hideOnlyMobile {
	@include device(mobile) { display:none; }
}
.showMobile {
	@include device(mobile) { display:block !important; }
}
.hideMobile {
	@include device(mobile) { display:none; }
}

// tablet
.showOnlyTablet {
	display:none !important;
	@include device(tablet) { display:block !important; }
}
.hideOnlyTablet {
	@include device(tablet) { display:none; }
}
.showTablet {
	@include device(tablet) { display:block; }
}
.hideTablet {
	@include device(tablet) { display:none; }
}

// tablet
.showOnlyTabletPortrait {
	display:none !important;
	@include device(tablet-portrait) { display:block !important; }
}
.hideOnlyTabletPortrait {
	@include device(tablet-portrait) { display:none; }
}
.showTabletPortrait {
	@include device(tablet-portrait) { display:block !important; }
}
.hideTabletPortrait {
	@include device(tablet-portrait) { display:none; }
}

// desktop
.showOnlyDesktop {
	display:block;
	@include device(mobile) { display:none; }
	@include device(tablet) { display:none; }
	@include device(desktop) { display:block; }
}
.hideOnlyDesktop {
	display:none;
	@include device(mobile) { display:block; }
	@include device(tablet) { display:block; }
}
.showDesktop {
	@include device(desktop) { display:block; }
}
.hideDesktop {
	@include device(desktop) { display:none; }
}

// float classes
.clearfix {
	@include clearfix();
}
.floatright {
	float:right;
}
.floatleft {
	float:left;
}

/**
*	Preload Images
*
*	To use, add the class preload to the body and remove once the document is ready via JS
*/
.preload * {
	-webkit-transition: none !important;
	-moz-transition: none !important;
	-ms-transition: none !important;
	-o-transition: none !important;
}